// If the starting Node is NULL (remove, Node* nr = new Node(95) from 'main' function and allocate Node* head=NULL  and Node* tail=NULL)

#include<iostream>
using namespace std;

class Node{
    
    public:
    int data;
    Node* prev;
    Node* next;
    
    // constructor
    Node(int d){
        this -> data = d;
        this -> prev = NULL;
        this -> next = NULL;
    }
    
    // Distructor
    ~Node(){
        int val = this -> data;
        if(next != NULL){
            delete next;
            next = NULL;
        }
        cout<<"Memory free for node with data: "<<val<<endl;
    }
};

// traversing the linked list
void print(Node* head){
    Node* temp = head; 
    while(temp != NULL){
        cout<< temp -> data<<" ";
        temp = temp-> next;
    }
    cout<<endl;
}

// gives length of linked list
int getLength(Node* head){
    int len = 0;
    Node* temp = head;
    while(temp != NULL){
        len++;
        temp = temp -> next;
    }
    return len;
}

void insertAtHead(Node* &tail, Node* &head, int d){
    // empty list
    if(head==NULL){
        Node* temp = new Node(d);
        head = temp;
        tail = temp;
    }
    else{
        Node* temp = new Node(d);
        temp -> next = head;
        head -> prev = temp;
        head = temp;
    }
    
}

void insertAtTail(Node* &tail, Node* &head, int d){
    if(tail==NULL){
        Node* temp = new Node(d);    
        tail = temp;
        head = temp;
    }
    else{
        // New node create
        Node* temp = new Node(d); 
        tail -> next = temp;
        temp -> prev = tail;
        tail = temp;
    }
    
}

void insertAtPosition(Node* &tail, Node* &head, int position, int d){
    // insert at start
    if(position == 1){
        insertAtHead(tail, head, d);
        return;
    }
    Node* temp = head;
    int count = 1;
    while(count<position-1){
        temp = temp -> next;
        count++;
    }
    // inserting at last position
    if(temp -> next == NULL){
        insertAtTail(tail, head, d);
        return;
    }
    // creating a node for d
    Node* nodeToInsert = new Node(d);
    nodeToInsert -> next = temp -> next;
    temp -> next -> prev = nodeToInsert;
    temp -> next = nodeToInsert;
    nodeToInsert -> prev = temp;
}

void deleteNode(int position, Node* &head){
    // deleting first or start node
    if(position == 1){
        Node* temp = head;
        temp -> next -> prev = NULL;
        head = temp -> next;
        // memory free start node
        temp -> next = NULL;
        delete temp;
    }
    else{
        // deleting any middle node or last node
        Node* curr = head;
        Node* prev = NULL;
        
        int count = 1;
        while(count < position){
            prev = curr;
            curr = curr -> next;
            count++;
        }
        curr -> prev = NULL;
        prev -> next = curr -> next;
        curr -> next =NULL;
        
        delete curr;
    }
}

int main(){
    Node* head = NULL;
    Node* tail = NULL;
    print(head);
    
    insertAtTail(tail, head, 1);
    print(head);
    
    insertAtTail(tail, head, 9);
    print(head);
    
    insertAtTail(tail, head, 5);
    print(head);
    
    insertAtTail(tail, head, 195);
    print(head);
    
    insertAtPosition(tail, head, 2, 22);
    print(head);
    
    // deleteNode(1, head);
    // print(head);
    
    deleteNode(2, head);
    print(head);
    
    deleteNode(5, head);
    print(head);
}

